package com.example.payingguest.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.payingguest.entities.Bill;
import com.example.payingguest.entities.User;
import com.example.payingguest.exception.CustomException;
import com.example.payingguest.service.BillService;

@RestController
@CrossOrigin("*")
@RequestMapping("/pg_api/bill")
public class BillController {

	@Autowired
	private BillService billServiceRef;

	@PostMapping("/generateBill")
	public ResponseEntity<?> generateBill(@RequestBody User user) {
		try {
			return new ResponseEntity<>(billServiceRef.generateBillForUser(user), HttpStatus.OK);
		} catch (CustomException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/getbillbyid/{billId}")
	public ResponseEntity<?> getBill(@PathVariable Long billId) {
		try {
			return new ResponseEntity<>(billServiceRef.getBillById(billId), HttpStatus.OK);
		} catch (CustomException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/getbillbyUserid/{userId}")
	public ResponseEntity<?> getBillByUserId(@PathVariable Long userId) {
		try {
			return new ResponseEntity<>(billServiceRef.getBillByUserId(userId), HttpStatus.OK);
		} catch (CustomException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("/deletebill/{billId}")
	public ResponseEntity<?> deleteBill(@PathVariable Long billId) {
		try {
			return new ResponseEntity<>(billServiceRef.deleteBillbyBillId(billId), HttpStatus.OK);
		} catch (CustomException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}

	}
	
	@GetMapping("/downloadBill")
	public ResponseEntity<?> downloadBill(@RequestBody Bill billRef){
		try {
			return new ResponseEntity<>(billServiceRef.generatePdf(billRef),HttpStatus.OK);
		}catch (Exception e) {
			return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
		}
	}

}












