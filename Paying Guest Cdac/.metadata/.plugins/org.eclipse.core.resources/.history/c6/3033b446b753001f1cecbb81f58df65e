package com.example.payingguest.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.payingguest.config.JwtProvider;
import com.example.payingguest.entities.User;
import com.example.payingguest.exception.CustomException;
import com.example.payingguest.exception.EmailAlreadyExistsException;
import com.example.payingguest.exception.UserNotFoundException;
import com.example.payingguest.repository.UserRepo;

@Service
public class UserService {

	@Autowired
	private UserRepo userRepoRef;
	
	@Autowired 
 private	JwtProvider jwtProviderRef;

	public List<User> GetAllUsers() {
		List<User> userList = userRepoRef.findAll();
		if (userList.size() != 0)
			return userList;
		else {
			throw new UserNotFoundException("User Not Found");
		}
	}

	public User getOneUser(Long id) {
		return userRepoRef.findById(id).orElseThrow(() -> new UserNotFoundException("User Not Found"));
	}

	public List<User> GetAllUsersByRole(String role) {
		List<User> userList = userRepoRef.findByRole(role);
		if (userList.size() != 0)
			return userList;
		else {
			throw new UserNotFoundException("User Not Found");
		}
	}

	public User GetByEmail(String mail) {
		User userRef = userRepoRef.findByEmail(mail);
		if (userRef != null) {
			return userRef;
		} else {

			throw new UserNotFoundException("User Not Found");

		}
	}

	public User registration(User newUser) {
		User user = userRepoRef.findByEmail(newUser.getEmail());
		if (user == null) {
			return userRepoRef.save(newUser);
		} else {
			throw new EmailAlreadyExistsException("An account with this email already exists.");
		}
	}

	public ResponseEntity<?> delete(Long id) {
		User user = userRepoRef.findById(id).orElseThrow(() -> new UserNotFoundException("user Not Found"));
		if (user != null) {
			userRepoRef.delete(user);
			return new ResponseEntity<>("user deleted", HttpStatus.OK);
		} else {
			throw new CustomException("unable to delete");
		}

	}

	public ResponseEntity<?> update(User userRef) {
		User user = userRepoRef.findById(userRef.getUserId())
				.orElseThrow(() -> new UserNotFoundException("user Not Found to Update"));
		if (user != null) {
			user.setAddress(userRef.getAddress());
			user.setEmail(userRef.getEmail());
			user.setMobileNo(userRef.getMobileNo());
			user.setName(userRef.getName());
			userRepoRef.save(user);
			return new ResponseEntity<>("info Updated", HttpStatus.OK);
		} else {
			throw new CustomException("unable to updaate");
		}
	}

	public ResponseEntity<?> upadatePassword(Long userId, String password) {
		User user = userRepoRef.findById(userId).orElseThrow(() -> new UserNotFoundException("user Not Found"));
		if (user != null) {
			user.setPassword(password);
			userRepoRef.save(user);
			return new ResponseEntity<>("Password change successuful", HttpStatus.OK);
		} else {
			throw new CustomException("unable to change password");
		}
	}

}
